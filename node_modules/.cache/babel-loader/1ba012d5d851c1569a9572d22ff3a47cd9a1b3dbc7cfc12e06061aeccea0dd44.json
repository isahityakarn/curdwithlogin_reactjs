{"ast":null,"code":"var _jsxFileName = \"/Users/sahityakarn/Documents/reactjs/curdwithlogin/src/context/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Check if user is logged in on app start\n    const token = localStorage.getItem('token');\n    const userData = localStorage.getItem('user');\n    if (token && userData) {\n      setIsAuthenticated(true);\n      setUser(JSON.parse(userData));\n    }\n    setLoading(false);\n  }, []);\n  const login = async (email, password) => {\n    try {\n      const response = await fetch('http://localhost:5050/api/users/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        localStorage.setItem('token', data.token);\n        localStorage.setItem('user', JSON.stringify(data.user));\n        setIsAuthenticated(true);\n        setUser(data.user);\n        return {\n          success: true,\n          message: 'Login successful'\n        };\n      } else {\n        return {\n          success: false,\n          message: data.message || 'Login failed'\n        };\n      }\n    } catch (error) {\n      return {\n        success: false,\n        message: 'Network error. Please try again.'\n      };\n    }\n  };\n  const register = async (name, email, password) => {\n    try {\n      const response = await fetch('http://localhost:5050/api/users/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          name,\n          email,\n          password\n        })\n      });\n      const data = await response.json();\n\n      // Debug logging to see API response\n      console.log('Registration API Response:', {\n        status: response.status,\n        ok: response.ok,\n        data: data\n      });\n      if (response.ok) {\n        return {\n          success: true,\n          message: data.message || 'Registration successful. Please login.'\n        };\n      } else {\n        // Try to get error message from various possible API response formats\n        const errorMessage = data.message || data.error || data.errors || 'Please check your information and try again.';\n        console.log('Registration error message:', errorMessage);\n        return {\n          success: false,\n          message: errorMessage\n        };\n      }\n    } catch (error) {\n      console.error('Registration network error:', error);\n      return {\n        success: false,\n        message: 'Network error. Please check your connection and try again.'\n      };\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    setIsAuthenticated(false);\n    setUser(null);\n  };\n  const value = {\n    isAuthenticated,\n    user,\n    login,\n    register,\n    logout,\n    loading\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"mKb+zX9grAar2iMVStuBBwt7fpw=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","isAuthenticated","setIsAuthenticated","user","setUser","loading","setLoading","token","localStorage","getItem","userData","JSON","parse","login","email","password","response","fetch","method","headers","body","stringify","data","json","ok","setItem","success","message","error","register","name","console","log","status","errorMessage","errors","logout","removeItem","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/sahityakarn/Documents/reactjs/curdwithlogin/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // Check if user is logged in on app start\n    const token = localStorage.getItem('token');\n    const userData = localStorage.getItem('user');\n    \n    if (token && userData) {\n      setIsAuthenticated(true);\n      setUser(JSON.parse(userData));\n    }\n    setLoading(false);\n  }, []);\n\n  const login = async (email, password) => {\n    try {\n      const response = await fetch('http://localhost:5050/api/users/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email, password }),\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        localStorage.setItem('token', data.token);\n        localStorage.setItem('user', JSON.stringify(data.user));\n        setIsAuthenticated(true);\n        setUser(data.user);\n        return { success: true, message: 'Login successful' };\n      } else {\n        return { success: false, message: data.message || 'Login failed' };\n      }\n    } catch (error) {\n      return { success: false, message: 'Network error. Please try again.' };\n    }\n  };\n\n  const register = async (name, email, password) => {\n    try {\n      const response = await fetch('http://localhost:5050/api/users/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ name, email, password }),\n      });\n\n      const data = await response.json();\n      \n      // Debug logging to see API response\n      console.log('Registration API Response:', {\n        status: response.status,\n        ok: response.ok,\n        data: data\n      });\n\n      if (response.ok) {\n        return { success: true, message: data.message || 'Registration successful. Please login.' };\n      } else {\n        // Try to get error message from various possible API response formats\n        const errorMessage = data.message || data.error || data.errors || 'Please check your information and try again.';\n        console.log('Registration error message:', errorMessage);\n        return { success: false, message: errorMessage };\n      }\n    } catch (error) {\n      console.error('Registration network error:', error);\n      return { success: false, message: 'Network error. Please check your connection and try again.' };\n    }\n  };\n\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    setIsAuthenticated(false);\n    setUser(null);\n  };\n\n  const value = {\n    isAuthenticated,\n    user,\n    login,\n    register,\n    logout,\n    loading\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {!loading && children}\n    </AuthContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}